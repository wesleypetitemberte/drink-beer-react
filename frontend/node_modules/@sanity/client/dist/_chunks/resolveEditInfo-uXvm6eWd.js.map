{"version":3,"file":"resolveEditInfo-uXvm6eWd.js","sources":["../../src/csm/studioPath.ts","../../src/csm/getPublishedId.ts","../../src/csm/jsonPath.ts","../../src/csm/resolveMapping.ts","../../src/csm/isArray.ts","../../src/csm/isRecord.ts","../../src/csm/walkMap.ts","../../src/csm/createEditUrl.ts","../../src/csm/resolveEditInfo.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","export const DRAFTS_PREFIX = 'drafts.'\n\n/** @internal */\nexport function getPublishedId(id: string): string {\n  if (id.startsWith(DRAFTS_PREFIX)) {\n    return id.slice(DRAFTS_PREFIX.length)\n  }\n\n  return id\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","/** @internal */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n","import {isArray} from './isArray'\nimport {isRecord} from './isRecord'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","import {getPublishedId} from './getPublishedId'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  // eslint-disable-next-line no-warning-comments\n  // @TODO allow passing draft prefixed IDs, to better open the right perspective mode\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n"],"names":["studioPath.fromString","studioPath.toString"],"mappings":"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"}