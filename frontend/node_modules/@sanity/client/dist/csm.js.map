{"version":3,"file":"csm.js","sources":["../src/csm/applySourceDocuments.ts","../src/csm/resolvedKeyedSourcePath.ts","../src/csm/resolveEditUrl.ts"],"sourcesContent":["import {DRAFTS_PREFIX, getPublishedId} from './getPublishedId'\nimport {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport * as paths from './studioPath'\nimport type {\n  Any,\n  ApplySourceDocumentsUpdateFunction,\n  ClientPerspective,\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  Path,\n  SanityDocument,\n} from './types'\nimport {walkMap} from './walkMap'\n\nconst defaultUpdateFunction = <T = unknown>(changed: T): T => changed\n\n/**\n * Optimistically applies source documents to a result, using the content source map to trace fields.\n * Can be used to apply mutations to documents being edited in a Studio, or any mutation on Content Lake, to a result with extremely low latency.\n * @alpha\n */\nexport function applySourceDocuments<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) => Partial<SanityDocument> | null | undefined,\n  updateFn: ApplySourceDocumentsUpdateFunction = defaultUpdateFunction,\n  perspective: ClientPerspective = 'raw',\n): Result {\n  if (!resultSourceMap) return result\n\n  if (perspective !== 'published' && perspective !== 'raw' && perspective !== 'previewDrafts') {\n    throw new Error(`Unknown perspective \"${perspective}\"`)\n  }\n\n  return walkMap(JSON.parse(JSON.stringify(result)), (value, path) => {\n    const resolveMappingResult = resolveMapping(path, resultSourceMap)\n    if (!resolveMappingResult) {\n      // console.warn('no mapping for path', path)\n      return value\n    }\n\n    const {mapping, pathSuffix} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = resultSourceMap.documents[mapping.source.document]\n    const sourcePath = resultSourceMap.paths[mapping.source.path]\n\n    if (sourceDocument) {\n      const parsedPath = parseJsonPath(sourcePath + pathSuffix)\n      const stringifiedPath = paths.toString(parsedPath as Path)\n\n      // The _id is sometimes used used as `key` in lists, and should not be changed optimistically\n      if (stringifiedPath === '_id') {\n        return value\n      }\n\n      let cachedDocument: Partial<SanityDocument> | null | undefined\n      if (perspective === 'previewDrafts') {\n        cachedDocument = getCachedDocument(\n          sourceDocument._id.startsWith(DRAFTS_PREFIX)\n            ? sourceDocument\n            : {...sourceDocument, _id: `${DRAFTS_PREFIX}.${sourceDocument._id}}`},\n        )\n        if (!cachedDocument) {\n          cachedDocument = getCachedDocument(\n            sourceDocument._id.startsWith(DRAFTS_PREFIX)\n              ? {...sourceDocument, _id: getPublishedId(sourceDocument._id)}\n              : sourceDocument,\n          )\n        }\n        if (cachedDocument) {\n          cachedDocument = {\n            ...cachedDocument,\n            _id: getPublishedId(sourceDocument._id),\n            _originalId: sourceDocument._id,\n          }\n        }\n      } else {\n        cachedDocument = getCachedDocument(sourceDocument)\n      }\n\n      if (!cachedDocument) {\n        return value\n      }\n\n      const changedValue = cachedDocument\n        ? paths.get<Result[keyof Result]>(cachedDocument, stringifiedPath, value)\n        : value\n      return value === changedValue\n        ? value\n        : updateFn<Result[keyof Result]>(changedValue as Any, {\n            cachedDocument,\n            previousValue: value as Result[keyof Result],\n            sourceDocument,\n            sourcePath: parsedPath,\n          })\n    }\n\n    return value\n  }) as Result\n}\n","import {jsonPath, parseJsonPath} from './jsonPath'\nimport type {ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolvedKeyedSourcePath(options: {\n  keyedResultPath: ContentSourceMapParsedPath\n  pathSuffix?: string\n  sourceBasePath: string\n}): ContentSourceMapParsedPath {\n  const {keyedResultPath, pathSuffix, sourceBasePath} = options\n\n  const inferredResultPath = pathSuffix === undefined ? [] : parseJsonPath(pathSuffix)\n\n  const inferredPath = keyedResultPath.slice(keyedResultPath.length - inferredResultPath.length)\n\n  const inferredPathSuffix = inferredPath.length ? jsonPath(inferredPath).slice(1) : ''\n\n  return parseJsonPath(sourceBasePath + inferredPathSuffix)\n}\n","import {createEditUrl} from './createEditUrl'\nimport {studioPathToJsonPath} from './jsonPath'\nimport {resolveEditInfo} from './resolveEditInfo'\nimport type {ResolveEditUrlOptions} from './types'\n\n/** @alpha */\nexport function resolveEditUrl(\n  options: ResolveEditUrlOptions,\n): ReturnType<typeof createEditUrl> | undefined {\n  const {resultSourceMap, studioUrl} = options\n  const resultPath = studioPathToJsonPath(options.resultPath)\n\n  const editInfo = resolveEditInfo({\n    resultPath,\n    resultSourceMap,\n    studioUrl,\n  })\n  if (!editInfo) {\n    return undefined\n  }\n\n  return createEditUrl(editInfo)\n}\n"],"names":["paths.toString","paths.get"],"mappings":"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"}