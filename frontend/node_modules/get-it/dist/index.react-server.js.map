{"version":3,"file":"index.react-server.js","sources":["../src/request/browser/fetchXhr.ts","../src/request/browser-request.ts","../src/index.browser.ts","../src/index.react-server.ts"],"sourcesContent":["/**\n * Mimicks the XMLHttpRequest API with only the parts needed for get-it's XHR adapter\n */\nexport class FetchXhr\n  implements Pick<XMLHttpRequest, 'open' | 'abort' | 'getAllResponseHeaders' | 'setRequestHeader'>\n{\n  /**\n   * Public interface, interop with real XMLHttpRequest\n   */\n  onabort: () => void\n  onerror: (error?: any) => void\n  onreadystatechange: () => void\n  ontimeout: XMLHttpRequest['ontimeout']\n  /**\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\n   */\n  readyState: 0 | 1 | 2 | 3 | 4 = 0\n  response: XMLHttpRequest['response']\n  responseText: XMLHttpRequest['responseText']\n  responseType: XMLHttpRequest['responseType'] = ''\n  status: XMLHttpRequest['status']\n  statusText: XMLHttpRequest['statusText']\n  withCredentials: XMLHttpRequest['withCredentials']\n\n  /**\n   * Private implementation details\n   */\n  #method: string\n  #url: string\n  #resHeaders: string\n  #headers: Record<string, string> = {}\n  #controller?: AbortController\n  #init: RequestInit = {}\n  #useAbortSignal: boolean\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- _async is only declared for typings compatibility\n  open(method: string, url: string, _async?: boolean) {\n    this.#method = method\n    this.#url = url\n    this.#resHeaders = ''\n    this.readyState = 1 // Open\n    this.onreadystatechange()\n    this.#controller = undefined\n  }\n  abort() {\n    if (this.#controller) {\n      this.#controller.abort()\n    }\n  }\n  getAllResponseHeaders() {\n    return this.#resHeaders\n  }\n  setRequestHeader(name: string, value: string) {\n    this.#headers[name] = value\n  }\n  // Allow setting extra fetch init options, needed for runtimes such as Vercel Edge to set `cache` and other options in React Server Components\n  setInit(init: RequestInit, useAbortSignal = true) {\n    this.#init = init\n    this.#useAbortSignal = useAbortSignal\n  }\n  send(body: BodyInit) {\n    const textBody = this.responseType !== 'arraybuffer'\n    const options: RequestInit = {\n      ...this.#init,\n      method: this.#method,\n      headers: this.#headers,\n      body,\n    }\n    if (typeof AbortController === 'function' && this.#useAbortSignal) {\n      this.#controller = new AbortController()\n      // The instanceof check ensures environments like Edge Runtime, Node 18 with built-in fetch\n      // and more don't throw if `signal` doesn't implement`EventTarget`\n      // Native browser AbortSignal implements EventTarget, so we can use it\n      if (typeof EventTarget !== 'undefined' && this.#controller.signal instanceof EventTarget) {\n        options.signal = this.#controller.signal\n      }\n    }\n\n    // Some environments (like CloudFlare workers) don't support credentials in\n    // RequestInitDict, and there doesn't seem to be any easy way to check for it,\n    // so for now let's just make do with a document check :/\n    if (typeof document !== 'undefined') {\n      options.credentials = this.withCredentials ? 'include' : 'omit'\n    }\n\n    fetch(this.#url, options)\n      .then((res): Promise<string | ArrayBuffer> => {\n        res.headers.forEach((value: any, key: any) => {\n          this.#resHeaders += `${key}: ${value}\\r\\n`\n        })\n        this.status = res.status\n        this.statusText = res.statusText\n        this.readyState = 3 // Loading\n        return textBody ? res.text() : res.arrayBuffer()\n      })\n      .then((resBody) => {\n        if (typeof resBody === 'string') {\n          this.responseText = resBody\n        } else {\n          this.response = resBody\n        }\n        this.readyState = 4 // Done\n        this.onreadystatechange()\n      })\n      .catch((err: Error) => {\n        if (err.name === 'AbortError') {\n          this.onabort()\n          return\n        }\n\n        this.onerror?.(err)\n      })\n  }\n}\n","import parseHeaders from 'parse-headers'\n\nimport type {HttpRequest, MiddlewareResponse, RequestAdapter, RequestOptions} from '../types'\nimport {FetchXhr} from './browser/fetchXhr'\n\n// Use fetch if it's available, non-browser environments such as Deno, Edge Runtime and more provide fetch as a global but doesn't provide xhr\nexport const adapter: RequestAdapter = typeof XMLHttpRequest === 'function' ? 'xhr' : 'fetch'\n\n// Fallback to fetch-based XHR polyfill for non-browser environments like Workers\nconst XmlHttpRequest = adapter === 'xhr' ? XMLHttpRequest : FetchXhr\n\nexport const httpRequester: HttpRequest = (context, callback) => {\n  const opts = context.options\n  const options = context.applyMiddleware('finalizeOptions', opts) as RequestOptions\n  const timers: any = {}\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setTimeout(callback, 0, null, injectedResponse)\n    const cancel = () => clearTimeout(cbTimer)\n    return {abort: cancel}\n  }\n\n  // We'll want to null out the request on success/failure\n  let xhr = new XmlHttpRequest()\n\n  if (xhr instanceof FetchXhr && typeof options.fetch === 'object') {\n    xhr.setInit(options.fetch, options.useAbortSignal ?? true)\n  }\n\n  const headers = options.headers\n  const delays = options.timeout\n\n  // Request state\n  let aborted = false\n  let loaded = false\n  let timedOut = false\n\n  // Apply event handlers\n  xhr.onerror = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request error while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.ontimeout = (event: ProgressEvent) => {\n    onError(\n      new Error(\n        `Request timeout while attempting to reach ${options.url}${\n          event.lengthComputable ? `(${event.loaded} of ${event.total} bytes transferred)` : ''\n        }`,\n      ),\n    )\n  }\n  xhr.onabort = () => {\n    stopTimers(true)\n    aborted = true\n  }\n\n  xhr.onreadystatechange = () => {\n    // Prevent request from timing out\n    resetTimers()\n\n    if (aborted || xhr.readyState !== 4) {\n      return\n    }\n\n    // Will be handled by onError\n    if (xhr.status === 0) {\n      return\n    }\n\n    onLoad()\n  }\n\n  // @todo two last options to open() is username/password\n  xhr.open(\n    options.method!,\n    options.url,\n    true, // Always async\n  )\n\n  // Some options need to be applied after open\n  xhr.withCredentials = !!options.withCredentials\n\n  // Set headers\n  if (headers && xhr.setRequestHeader) {\n    for (const key in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key])\n      }\n    }\n  }\n\n  if (options.rawBody) {\n    xhr.responseType = 'arraybuffer'\n  }\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request: xhr, context})\n\n  xhr.send(options.body || null)\n\n  // Figure out which timeouts to use (if any)\n  if (delays) {\n    timers.connect = setTimeout(() => timeoutRequest('ETIMEDOUT'), delays.connect)\n  }\n\n  return {abort}\n\n  function abort() {\n    aborted = true\n\n    if (xhr) {\n      xhr.abort()\n    }\n  }\n\n  function timeoutRequest(code: any) {\n    timedOut = true\n    xhr.abort()\n    const error: any = new Error(\n      code === 'ESOCKETTIMEDOUT'\n        ? `Socket timed out on request to ${options.url}`\n        : `Connection timed out on request to ${options.url}`,\n    )\n    error.code = code\n    context.channels.error.publish(error)\n  }\n\n  function resetTimers() {\n    if (!delays) {\n      return\n    }\n\n    stopTimers()\n    timers.socket = setTimeout(() => timeoutRequest('ESOCKETTIMEDOUT'), delays.socket)\n  }\n\n  function stopTimers(force?: boolean) {\n    // Only clear the connect timeout if we've got a connection\n    if (force || aborted || (xhr.readyState >= 2 && timers.connect)) {\n      clearTimeout(timers.connect)\n    }\n\n    if (timers.socket) {\n      clearTimeout(timers.socket)\n    }\n  }\n\n  function onError(error: Error) {\n    if (loaded) {\n      return\n    }\n\n    // Clean up\n    stopTimers(true)\n    loaded = true\n    ;(xhr as any) = null\n\n    // Annoyingly, details are extremely scarce and hidden from us.\n    // We only really know that it is a network error\n    const err = (error ||\n      new Error(`Network error while attempting to reach ${options.url}`)) as Error & {\n      isNetworkError: boolean\n      request?: typeof options\n    }\n    err.isNetworkError = true\n    err.request = options\n    callback(err)\n  }\n\n  function reduceResponse(): MiddlewareResponse {\n    return {\n      body:\n        xhr.response ||\n        (xhr.responseType === '' || xhr.responseType === 'text' ? xhr.responseText : ''),\n      url: options.url,\n      method: options.method!,\n      headers: parseHeaders(xhr.getAllResponseHeaders()),\n      statusCode: xhr.status,\n      statusMessage: xhr.statusText,\n    }\n  }\n\n  function onLoad() {\n    if (aborted || loaded || timedOut) {\n      return\n    }\n\n    if (xhr.status === 0) {\n      onError(new Error('Unknown XHR error'))\n      return\n    }\n\n    // Prevent being called twice\n    stopTimers()\n    loaded = true\n    callback(null, reduceResponse())\n  }\n}\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/browser-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'browser'\n\n/** @public */\nexport {adapter} from './request/browser-request'\n","import type {ExportEnv} from './types'\n\nexport * from './index.browser'\n\n/** @public */\nexport const environment: ExportEnv = 'react-server'\n"],"names":[],"mappings":"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"}