{"version":3,"file":"index.cjs","sources":["../src/util/middlewareReducer.ts","../src/util/pubsub.ts","../src/createRequester.ts","../src/util/lowerCaseHeaders.ts","../src/request/node/proxy.ts","../src/request/node/simpleConcat.ts","../src/request/node/timedOut.ts","../src/request/node/tunnel.ts","../src/request/node-request.ts","../src/index.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    } as any,\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.',\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event',\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n","export function lowerCaseHeaders(headers: any) {\n  return Object.keys(headers || {}).reduce((acc, header) => {\n    acc[header.toLowerCase()] = headers[header]\n    return acc\n  }, {} as any)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Apache License 2.0\n */\n\nimport url from 'url'\n\nfunction formatHostname(hostname: string) {\n  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'\n  return hostname.replace(/^\\.*/, '.').toLowerCase()\n}\n\nfunction parseNoProxyZone(zoneStr: string) {\n  const zone = zoneStr.trim().toLowerCase()\n\n  const zoneParts = zone.split(':', 2)\n  const zoneHost = formatHostname(zoneParts[0])\n  const zonePort = zoneParts[1]\n  const hasPort = zone.indexOf(':') > -1\n\n  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}\n}\n\nfunction uriInNoProxy(uri: any, noProxy: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  const hostname = formatHostname(uri.hostname)\n  const noProxyList = noProxy.split(',')\n\n  // iterate through the noProxyList until it finds a match.\n  return noProxyList.map(parseNoProxyZone).some((noProxyZone: any) => {\n    const isMatchedAt = hostname.indexOf(noProxyZone.hostname)\n    const hostnameMatched =\n      isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length\n\n    if (noProxyZone.hasPort) {\n      return port === noProxyZone.port && hostnameMatched\n    }\n\n    return hostnameMatched\n  })\n}\n\nfunction getProxyFromUri(uri: any) {\n  // Decide the proper request proxy to use based on the request URI object and the\n  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)\n  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)\n  const noProxy = process.env.NO_PROXY || process.env.no_proxy || ''\n\n  // if the noProxy is a wildcard then return null\n  if (noProxy === '*') {\n    return null\n  }\n\n  // if the noProxy is not empty and the uri is found return null\n  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {\n    return null\n  }\n\n  // Check for HTTP or HTTPS Proxy in environment, else default to null\n  if (uri.protocol === 'http:') {\n    return process.env.HTTP_PROXY || process.env.http_proxy || null\n  }\n\n  if (uri.protocol === 'https:') {\n    return (\n      process.env.HTTPS_PROXY ||\n      process.env.https_proxy ||\n      process.env.HTTP_PROXY ||\n      process.env.http_proxy ||\n      null\n    )\n  }\n\n  // if none of that works, return null\n  // (What uri protocol are you using then?)\n  return null\n}\n\nfunction getHostFromUri(uri: any) {\n  let host = uri.host\n\n  // Drop :port suffix from Host header if known protocol.\n  if (uri.port) {\n    if (\n      (uri.port === '80' && uri.protocol === 'http:') ||\n      (uri.port === '443' && uri.protocol === 'https:')\n    ) {\n      host = uri.hostname\n    }\n  }\n\n  return host\n}\n\nfunction getHostHeaderWithPort(uri: any) {\n  const port = uri.port || (uri.protocol === 'https:' ? '443' : '80')\n  return `${uri.hostname}:${port}`\n}\n\nexport function rewriteUriForProxy(reqOpts: any, uri: any, proxy: any) {\n  const headers = reqOpts.headers || {}\n  const options = Object.assign({}, reqOpts, {headers})\n  headers.host = headers.host || getHostHeaderWithPort(uri)\n  options.protocol = proxy.protocol || options.protocol\n  options.hostname = proxy.host.replace(/:\\d+/, '')\n  options.port = proxy.port\n  options.host = getHostFromUri(Object.assign({}, uri, proxy))\n  options.href = `${options.protocol}//${options.host}${options.path}`\n  options.path = url.format(uri)\n  return options\n}\n\nexport function getProxyOptions(options: any) {\n  let proxy\n  // eslint-disable-next-line no-prototype-builtins\n  if (options.hasOwnProperty('proxy')) {\n    proxy = options.proxy\n  } else {\n    const uri = url.parse(options.url)\n    proxy = getProxyFromUri(uri)\n  }\n\n  return typeof proxy === 'string' ? url.parse(proxy) : proxy\n}\n","/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexport function concat(stream: any, cb: any) {\n  const chunks: any = []\n  stream.on('data', function (chunk: any) {\n    chunks.push(chunk)\n  })\n  stream.once('end', function () {\n    if (cb) cb(null, Buffer.concat(chunks))\n    cb = null\n  })\n  stream.once('error', function (err: any) {\n    if (cb) cb(err)\n    cb = null\n  })\n}\n","// Copied from `@sanity/timed-out`\n\nexport function timedOut(req: any, time: any) {\n  if (req.timeoutTimer) {\n    return req\n  }\n\n  const delays = isNaN(time) ? time : {socket: time, connect: time}\n  const hostHeader = req.getHeader('host')\n  const host = hostHeader ? ' to ' + hostHeader : ''\n\n  if (delays.connect !== undefined) {\n    req.timeoutTimer = setTimeout(function timeoutHandler() {\n      req.abort()\n      const e: any = new Error('Connection timed out on request' + host)\n      e.code = 'ETIMEDOUT'\n      req.emit('error', e)\n    }, delays.connect)\n  }\n\n  // Clear the connection timeout timer once a socket is assigned to the\n  // request and is connected.\n  req.on('socket', function assign(socket: any) {\n    // Socket may come from Agent pool and may be already connected.\n    if (!(socket.connecting || socket._connecting)) {\n      connect()\n      return\n    }\n\n    socket.once('connect', connect)\n  })\n\n  function clear() {\n    if (req.timeoutTimer) {\n      clearTimeout(req.timeoutTimer)\n      req.timeoutTimer = null\n    }\n  }\n\n  function connect() {\n    clear()\n\n    if (delays.socket !== undefined) {\n      // Abort the request if there is no activity on the socket for more\n      // than `delays.socket` milliseconds.\n      req.setTimeout(delays.socket, function socketTimeoutHandler() {\n        req.abort()\n        const e: any = new Error('Socket timed out on request' + host)\n        e.code = 'ESOCKETTIMEDOUT'\n        req.emit('error', e)\n      })\n    }\n  }\n\n  return req.on('error', clear)\n}\n","/**\n * Code borrowed from https://github.com/request/request\n * Modified to be less request-specific, more functional\n * Apache License 2.0\n */\nimport * as tunnel from 'tunnel-agent'\nimport url from 'url'\n\nconst uriParts = [\n  'protocol',\n  'slashes',\n  'auth',\n  'host',\n  'port',\n  'hostname',\n  'hash',\n  'search',\n  'query',\n  'pathname',\n  'path',\n  'href',\n]\n\nconst defaultProxyHeaderWhiteList = [\n  'accept',\n  'accept-charset',\n  'accept-encoding',\n  'accept-language',\n  'accept-ranges',\n  'cache-control',\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-md5',\n  'content-range',\n  'content-type',\n  'connection',\n  'date',\n  'expect',\n  'max-forwards',\n  'pragma',\n  'referer',\n  'te',\n  'user-agent',\n  'via',\n]\n\nconst defaultProxyHeaderExclusiveList = ['proxy-authorization']\n\nexport function shouldEnable(options: any) {\n  // Tunnel HTTPS by default. Allow the user to override this setting.\n\n  // If user has specified a specific tunnel override...\n  if (typeof options.tunnel !== 'undefined') {\n    return Boolean(options.tunnel)\n  }\n\n  // If the destination is HTTPS, tunnel.\n  const uri = url.parse(options.url)\n  if (uri.protocol === 'https:') {\n    return true\n  }\n\n  // Otherwise, do not use tunnel.\n  return false\n}\n\nexport function applyAgent(opts: any = {}, proxy: any) {\n  const options = Object.assign({}, opts)\n\n  // Setup proxy header exclusive list and whitelist\n  const proxyHeaderWhiteList = defaultProxyHeaderWhiteList\n    .concat(options.proxyHeaderWhiteList || [])\n    .map((header) => header.toLowerCase())\n\n  const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList\n    .concat(options.proxyHeaderExclusiveList || [])\n    .map((header) => header.toLowerCase())\n\n  // Get the headers we should send to the proxy\n  const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList)\n  proxyHeaders.host = constructProxyHost(options)\n\n  // Reduce headers to the ones not exclusive for the proxy\n  options.headers = Object.keys(options.headers || {}).reduce((headers, header) => {\n    const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1\n    if (isAllowed) {\n      headers[header] = options.headers[header]\n    }\n\n    return headers\n  }, {} as any)\n\n  const tunnelFn = getTunnelFn(options, proxy)\n  const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders)\n  options.agent = tunnelFn(tunnelOptions)\n\n  return options\n}\n\nfunction getTunnelFn(options: any, proxy: any) {\n  const uri = getUriParts(options)\n  const tunnelFnName = constructTunnelFnName(uri, proxy)\n  return tunnel[tunnelFnName]\n}\n\nfunction getUriParts(options: any) {\n  return uriParts.reduce((uri, part) => {\n    uri[part] = options[part]\n    return uri\n  }, {} as any)\n}\n\ntype UriProtocol = `http` | `https`\ntype ProxyProtocol = `Http` | `Https`\nfunction constructTunnelFnName(uri: any, proxy: any): `${UriProtocol}Over${ProxyProtocol}` {\n  const uriProtocol = uri.protocol === 'https:' ? 'https' : 'http'\n  const proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http'\n  return `${uriProtocol}Over${proxyProtocol}`\n}\n\nfunction constructProxyHost(uri: any) {\n  const port = uri.port\n  const protocol = uri.protocol\n  let proxyHost = `${uri.hostname}:`\n\n  if (port) {\n    proxyHost += port\n  } else if (protocol === 'https:') {\n    proxyHost += '443'\n  } else {\n    proxyHost += '80'\n  }\n\n  return proxyHost\n}\n\nfunction getAllowedProxyHeaders(headers: any, whiteList: any): any {\n  return Object.keys(headers)\n    .filter((header) => whiteList.indexOf(header.toLowerCase()) !== -1)\n    .reduce((set: any, header: any) => {\n      set[header] = headers[header]\n      return set\n    }, {})\n}\n\nfunction constructTunnelOptions(options: any, proxy: any, proxyHeaders: any) {\n  return {\n    proxy: {\n      host: proxy.hostname,\n      port: +proxy.port,\n      proxyAuth: proxy.auth,\n      headers: proxyHeaders,\n    },\n    headers: options.headers,\n    ca: options.ca,\n    cert: options.cert,\n    key: options.key,\n    passphrase: options.passphrase,\n    pfx: options.pfx,\n    ciphers: options.ciphers,\n    rejectUnauthorized: options.rejectUnauthorized,\n    secureOptions: options.secureOptions,\n    secureProtocol: options.secureProtocol,\n  }\n}\n","import decompressResponse from 'decompress-response'\nimport follow, {type FollowResponse, type RedirectableRequest} from 'follow-redirects'\nimport http from 'http'\nimport https from 'https'\nimport toStream from 'into-stream'\nimport isStream from 'is-stream'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport url from 'url'\n\nimport type {\n  FinalizeNodeOptionsPayload,\n  HttpRequest,\n  MiddlewareResponse,\n  RequestAdapter,\n} from '../types'\nimport {lowerCaseHeaders} from '../util/lowerCaseHeaders'\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\n/** @public */\nexport const adapter: RequestAdapter = 'node'\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (\n  res: any,\n  reqUrl: string,\n  method: string,\n  body: any,\n): MiddlewareResponse => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport const httpRequester: HttpRequest = (context, cb) => {\n  const {options} = context\n  const uri = Object.assign({}, url.parse(options.url))\n\n  if (typeof fetch === 'function' && options.fetch) {\n    const controller = new AbortController()\n    const reqOpts = context.applyMiddleware('finalizeOptions', {\n      ...uri,\n      method: options.method,\n      headers: {\n        ...(typeof options.fetch === 'object' && options.fetch.headers\n          ? lowerCaseHeaders(options.fetch.headers)\n          : {}),\n        ...lowerCaseHeaders(options.headers),\n      },\n      maxRedirects: options.maxRedirects,\n    }) as FinalizeNodeOptionsPayload\n    const fetchOpts = {\n      credentials: options.withCredentials ? 'include' : 'omit',\n      ...(typeof options.fetch === 'object' ? options.fetch : {}),\n      method: reqOpts.method,\n      headers: reqOpts.headers,\n      body: options.body,\n      signal: controller.signal,\n    } satisfies RequestInit\n\n    // Allow middleware to inject a response, for instance in the case of caching or mocking\n    const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n      adapter,\n      context,\n    })\n\n    // If middleware injected a response, treat it as we normally would and return it\n    // Do note that the injected response has to be reduced to a cross-environment friendly response\n    if (injectedResponse) {\n      const cbTimer = setTimeout(cb, 0, null, injectedResponse)\n      const cancel = () => clearTimeout(cbTimer)\n      return {abort: cancel}\n    }\n\n    const request = fetch(options.url, fetchOpts)\n\n    // Let middleware know we're about to do a request\n    context.applyMiddleware('onRequest', {options, adapter, request, context})\n\n    request\n      .then(async (res) => {\n        const body = options.rawBody ? res.body : await res.text()\n\n        const headers = {} as Record<string, string>\n        res.headers.forEach((value, key) => {\n          headers[key] = value\n        })\n\n        cb(null, {\n          body,\n          url: res.url,\n          method: options.method!,\n          headers,\n          statusCode: res.status,\n          statusMessage: res.statusText,\n        })\n      })\n      .catch((err) => {\n        if (err.name == 'AbortError') return\n        cb(err)\n      })\n\n    return {abort: () => controller.abort()}\n  }\n\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: Error | null, res?: MiddlewareResponse) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`,\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] = 'br, gzip, deflate'\n  }\n\n  const finalOptions = context.applyMiddleware(\n    'finalizeOptions',\n    reqOpts,\n  ) as FinalizeNodeOptionsPayload\n  const request = transport.request(finalOptions, (response) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = 'responseUrl' in response ? response.responseUrl : options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  request.once('error', callback)\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : toStream(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(\n  reqOpts: any,\n  proxy: any,\n  tunnel: any,\n): {\n  request: (\n    options: any,\n    callback: (response: http.IncomingMessage | (http.IncomingMessage & FollowResponse)) => void,\n  ) => http.ClientRequest | RedirectableRequest<http.ClientRequest, http.IncomingMessage>\n} {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n\n// function isFile(val: any): val is File {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'File'\n// }\n\n// function isBlob(val: any): val is Blob {\n//   return typeof val === 'object' && val?.[Symbol.toStringTag] === 'Blob'\n// }\n","import {createRequester} from './createRequester'\nimport {httpRequester} from './request/node-request'\nimport type {ExportEnv, HttpRequest, Middlewares, Requester} from './types'\n\nexport type * from './types'\n\n/** @public */\nexport const getIt = (\n  initMiddleware: Middlewares = [],\n  httpRequest: HttpRequest = httpRequester,\n): Requester => createRequester(initMiddleware, httpRequest)\n\n/** @public */\nexport const environment: ExportEnv = 'node'\n\n/** @public */\nexport {adapter} from './request/node-request'\n"],"names":["processOptions","validateOptions","url","tunnel","reqOpts","injectedResponse","request","isStream","tunneling.shouldEnable","tunneling.applyAgent","qs","decompressResponse","progressStream","toStream","http","https","follow"],"mappings":"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"}