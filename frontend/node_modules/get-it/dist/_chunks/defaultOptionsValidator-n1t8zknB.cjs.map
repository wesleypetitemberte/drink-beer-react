{"version":3,"file":"defaultOptionsValidator-n1t8zknB.cjs","sources":["../../src/middleware/defaultOptionsProcessor.ts","../../src/middleware/defaultOptionsValidator.ts"],"sourcesContent":["import type {MiddlewareHooks, RequestOptions} from '../types'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Allow parsing relative URLs by setting the origin to `http://localhost`\n  const {searchParams} = new URL(options.url, 'http://localhost')\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n    }\n  }\n  // Merge back params into url\n  const [url] = options.url.split('?')\n  const search = searchParams.toString()\n  if (search) {\n    options.url = `${url}?${search}`\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n","import type {MiddlewareHooks} from '../types'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],"names":["processOptions","validateOptions"],"mappings":";;AAEA,MAAM,gBAAgB,OAAO,SAAA,KAAc,WAAc,GAAA,KAAA,GAAQ,UAAU,OAAY,KAAA,aAAA,CAAA;AAEvF,MAAM,cAAiB,GAAA,EAAC,OAAS,EAAA,aAAA,GAAgB,MAAQ,IAAM,EAAA,CAAA;AAGlD,MAAA,cAAA,GAAiB,SAASA,eAAAA,CAAe,IAAM,EAAA;AAC1D,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,GAAG,cAAA;AAAA,IACH,GAAI,OAAO,IAAA,KAAS,WAAW,EAAC,GAAA,EAAK,MAAQ,GAAA,IAAA;AAAA,GAC/C,CAAA;AAGA,EAAA,MAAM,EAAC,YAAY,EAAA,GAAI,IAAI,GAAI,CAAA,OAAA,CAAQ,KAAK,kBAAkB,CAAA,CAAA;AAG9D,EAAQ,OAAA,CAAA,OAAA,GAAU,gBAAiB,CAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAGlD,EAAA,IAAI,QAAQ,KAAO,EAAA;AACjB,IAAW,KAAA,MAAA,CAAC,KAAK,KAAK,CAAA,IAAK,OAAO,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACxD,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AACxB,UAAA,KAAA,MAAW,KAAK,KAAO,EAAA;AACrB,YAAa,YAAA,CAAA,MAAA,CAAO,KAAK,CAAW,CAAA,CAAA;AAAA,WACtC;AAAA,SACK,MAAA;AACL,UAAa,YAAA,CAAA,MAAA,CAAO,KAAK,KAAe,CAAA,CAAA;AAAA,SAC1C;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAEA,EAAA,MAAM,CAAC,GAAG,CAAA,GAAI,OAAQ,CAAA,GAAA,CAAI,MAAM,GAAG,CAAA,CAAA;AACnC,EAAM,MAAA,MAAA,GAAS,aAAa,QAAS,EAAA,CAAA;AACrC,EAAA,IAAI,MAAQ,EAAA;AACV,IAAQ,OAAA,CAAA,GAAA,GAAM,EAAG,CAAA,MAAA,CAAA,GAAA,EAAG,GAAI,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AAAA,GAC1B;AAGA,EAAQ,OAAA,CAAA,MAAA,GACN,OAAQ,CAAA,IAAA,IAAQ,CAAC,OAAA,CAAQ,SAAS,MAAU,GAAA,CAAA,OAAA,CAAQ,MAAU,IAAA,KAAA,EAAO,WAAY,EAAA,CAAA;AAEnF,EAAO,OAAA,OAAA,CAAA;AACT,EAAA;AAEA,SAAS,iBAAiB,IAAiC,EAAA;AACzD,EAAI,IAAA,IAAA,KAAS,KAAS,IAAA,IAAA,KAAS,CAAG,EAAA;AAChC,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,IAAA,CAAK,OAAW,IAAA,IAAA,CAAK,MAAQ,EAAA;AAC/B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,KAAA,GAAQ,OAAO,IAAI,CAAA,CAAA;AACzB,EAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,IAAO,OAAA,gBAAA,CAAiB,eAAe,OAAO,CAAA,CAAA;AAAA,GAChD;AAEA,EAAA,OAAO,EAAC,OAAA,EAAS,KAAO,EAAA,MAAA,EAAQ,KAAK,EAAA,CAAA;AACvC;;AC5DA,MAAM,QAAW,GAAA,eAAA,CAAA;AAGJ,MAAA,eAAA,GAAkB,SAASC,gBAAAA,CAAgB,OAAS,EAAA;AAC/D,EAAA,IAAI,CAAC,QAAA,CAAS,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAG,EAAA;AAC/B,IAAA,MAAM,IAAI,KAAA,CAAM,GAAI,CAAA,MAAA,CAAA,OAAA,CAAQ,KAAG,sBAAsB,CAAA,CAAA,CAAA;AAAA,GACvD;AACF;;;;;"}