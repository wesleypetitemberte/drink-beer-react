{"version":3,"file":"createRequester-46TmGIk5.js","sources":["../../src/util/middlewareReducer.ts","../../src/util/pubsub.ts","../../src/createRequester.ts"],"sourcesContent":["import type {ApplyMiddleware, MiddlewareReducer} from '../types'\n\nexport const middlewareReducer = (middleware: MiddlewareReducer) =>\n  function applyMiddleware(hook, defaultValue, ...args) {\n    const bailEarly = hook === 'onError'\n\n    let value = defaultValue\n    for (let i = 0; i < middleware[hook].length; i++) {\n      const handler = middleware[hook][i]\n      // @ts-expect-error -- find a better way to deal with argument tuples\n      value = handler(value, ...args)\n\n      if (bailEarly && !value) {\n        break\n      }\n    }\n\n    return value\n  } as ApplyMiddleware\n","// Code borrowed from https://github.com/bjoerge/nano-pubsub\n\nimport type {PubSub, Subscriber} from '../types'\n\nexport function createPubSub<Message = void>(): PubSub<Message> {\n  const subscribers: {[id: string]: Subscriber<Message>} = Object.create(null)\n  let nextId = 0\n  function subscribe(subscriber: Subscriber<Message>) {\n    const id = nextId++\n    subscribers[id] = subscriber\n    return function unsubscribe() {\n      delete subscribers[id]\n    }\n  }\n\n  function publish(event: Message) {\n    for (const id in subscribers) {\n      subscribers[id](event)\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {processOptions} from './middleware/defaultOptionsProcessor'\nimport {validateOptions} from './middleware/defaultOptionsValidator'\nimport type {\n  HttpContext,\n  HttpRequest,\n  HttpRequestOngoing,\n  Middleware,\n  MiddlewareChannels,\n  MiddlewareHooks,\n  MiddlewareReducer,\n  MiddlewareResponse,\n  Middlewares,\n  Requester,\n  RequestOptions,\n} from './types'\nimport {middlewareReducer} from './util/middlewareReducer'\nimport {createPubSub} from './util/pubsub'\n\nconst channelNames = [\n  'request',\n  'response',\n  'progress',\n  'error',\n  'abort',\n] satisfies (keyof MiddlewareChannels)[]\nconst middlehooks = [\n  'processOptions',\n  'validateOptions',\n  'interceptRequest',\n  'finalizeOptions',\n  'onRequest',\n  'onResponse',\n  'onError',\n  'onReturn',\n  'onHeaders',\n] satisfies (keyof MiddlewareHooks)[]\n\n/** @public */\nexport function createRequester(initMiddleware: Middlewares, httpRequest: HttpRequest): Requester {\n  const loadedMiddleware: Middlewares = []\n  const middleware: MiddlewareReducer = middlehooks.reduce(\n    (ware, name) => {\n      ware[name] = ware[name] || []\n      return ware\n    },\n    {\n      processOptions: [processOptions],\n      validateOptions: [validateOptions],\n    } as any,\n  )\n\n  function request(opts: RequestOptions | string) {\n    const onResponse = (reqErr: Error | null, res: MiddlewareResponse, ctx: HttpContext) => {\n      let error = reqErr\n      let response: MiddlewareResponse | null = res\n\n      // We're processing non-errors first, in case a middleware converts the\n      // response into an error (for instance, status >= 400 == HttpError)\n      if (!error) {\n        try {\n          response = applyMiddleware('onResponse', res, ctx)\n        } catch (err: any) {\n          response = null\n          error = err\n        }\n      }\n\n      // Apply error middleware - if middleware return the same (or a different) error,\n      // publish as an error event. If we *don't* return an error, assume it has been handled\n      error = error && applyMiddleware('onError', error, ctx)\n\n      // Figure out if we should publish on error/response channels\n      if (error) {\n        channels.error.publish(error)\n      } else if (response) {\n        channels.response.publish(response)\n      }\n    }\n\n    const channels: MiddlewareChannels = channelNames.reduce((target, name) => {\n      target[name] = createPubSub() as MiddlewareChannels[typeof name]\n      return target\n    }, {} as any)\n\n    // Prepare a middleware reducer that can be reused throughout the lifecycle\n    const applyMiddleware = middlewareReducer(middleware)\n\n    // Parse the passed options\n    const options = applyMiddleware('processOptions', opts as RequestOptions)\n\n    // Validate the options\n    applyMiddleware('validateOptions', options)\n\n    // Build a context object we can pass to child handlers\n    const context = {options, channels, applyMiddleware}\n\n    // We need to hold a reference to the current, ongoing request,\n    // in order to allow cancellation. In the case of the retry middleware,\n    // a new request might be triggered\n    let ongoingRequest: HttpRequestOngoing | undefined\n    const unsubscribe = channels.request.subscribe((ctx) => {\n      // Let request adapters (node/browser) perform the actual request\n      ongoingRequest = httpRequest(ctx, (err, res) => onResponse(err, res!, ctx))\n    })\n\n    // If we abort the request, prevent further requests from happening,\n    // and be sure to cancel any ongoing request (obviously)\n    channels.abort.subscribe(() => {\n      unsubscribe()\n      if (ongoingRequest) {\n        ongoingRequest.abort()\n      }\n    })\n\n    // See if any middleware wants to modify the return value - for instance\n    // the promise or observable middlewares\n    const returnValue = applyMiddleware('onReturn', channels, context)\n\n    // If return value has been modified by a middleware, we expect the middleware\n    // to publish on the 'request' channel. If it hasn't been modified, we want to\n    // trigger it right away\n    if (returnValue === channels) {\n      channels.request.publish(context)\n    }\n\n    return returnValue\n  }\n\n  request.use = function use(newMiddleware: Middleware) {\n    if (!newMiddleware) {\n      throw new Error('Tried to add middleware that resolved to falsey value')\n    }\n\n    if (typeof newMiddleware === 'function') {\n      throw new Error(\n        'Tried to add middleware that was a function. It probably expects you to pass options to it.',\n      )\n    }\n\n    if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n      throw new Error(\n        'Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event',\n      )\n    }\n\n    middlehooks.forEach((key) => {\n      if (newMiddleware[key]) {\n        middleware[key].push(newMiddleware[key] as any)\n      }\n    })\n\n    loadedMiddleware.push(newMiddleware)\n    return request\n  }\n\n  request.clone = () => createRequester(loadedMiddleware, httpRequest)\n\n  initMiddleware.forEach(request.use)\n\n  return request\n}\n"],"names":[],"mappings":"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"}