import type * as Vite from "vite";
import { type ConfigRoute, type RouteManifest } from "../config/routes";
import { type AppConfig as RemixUserConfig, type RemixConfig as ResolvedRemixConfig } from "../config";
declare const supportedRemixConfigKeys: readonly ["appDirectory", "assetsBuildDirectory", "future", "ignoredRouteFiles", "publicPath", "routes", "serverModuleFormat"];
type SupportedRemixConfigKey = typeof supportedRemixConfigKeys[number];
type SupportedRemixConfig = Pick<RemixUserConfig, SupportedRemixConfigKey>;
type RemixConfigJsdocOverrides = {
    /**
     * The path to the browser build, relative to the project root. Defaults to
     * `"build/client"`.
     */
    assetsBuildDirectory?: SupportedRemixConfig["assetsBuildDirectory"];
    /**
     * The URL prefix of the browser build with a trailing slash. Defaults to
     * `"/"`. This is the path the browser will use to find assets.
     */
    publicPath?: SupportedRemixConfig["publicPath"];
};
declare const branchRouteProperties: readonly ["id", "path", "file", "index"];
type BranchRoute = Pick<ConfigRoute, typeof branchRouteProperties[number]>;
export declare const configRouteToBranchRoute: (configRoute: ConfigRoute) => BranchRoute;
type ServerBundlesFunction = (args: {
    branch: BranchRoute[];
}) => string | Promise<string>;
export type RemixVitePluginOptions = RemixConfigJsdocOverrides & Omit<SupportedRemixConfig, keyof RemixConfigJsdocOverrides> & {
    /**
     * The path to the server build directory, relative to the project. This
     * directory should be deployed to your server. Defaults to
     * `"build/server"`.
     */
    serverBuildDirectory?: string;
    /**
     * The file name of the server build output. This file
     * should end in a `.js` extension and should be deployed to your server.
     * Defaults to `"index.js"`.
     */
    serverBuildFile?: string;
    /**
     * A function for assigning routes to different server bundles. This
     * function should return a server bundle ID which will be used as the
     * bundle's directory name within the server build directory.
     */
    unstable_serverBundles?: ServerBundlesFunction;
    /**
     * Enable server-side rendering for your application. Disable to use Remix in
     * "SPA Mode", which will request the `/` path at build-time and save it as
     * an `index.html` file with your assets so your application can be deployed
     * as a SPA without server-rendering. Default's to `true`.
     */
    unstable_ssr?: boolean;
};
export type ResolvedRemixVitePluginConfig = Pick<ResolvedRemixConfig, "appDirectory" | "rootDirectory" | "assetsBuildDirectory" | "entryClientFilePath" | "entryServerFilePath" | "future" | "publicPath" | "relativeAssetsBuildDirectory" | "routes" | "serverModuleFormat"> & {
    isSpaMode: boolean;
    serverBuildDirectory: string;
    serverBuildFile: string;
    serverBundles?: ServerBundlesFunction;
};
export type ServerBuildConfig = {
    routes: RouteManifest;
    serverBuildDirectory: string;
};
export type RemixVitePlugin = (options?: RemixVitePluginOptions) => Vite.Plugin[];
export declare const remixVitePlugin: RemixVitePlugin;
export {};
